var documenterSearchIndex = {"docs":
[{"location":"types/","page":"Types","title":"Types","text":"CurrentModule = GeometricAlgebra","category":"page"},{"location":"types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"types/#Type-Hierarchy","page":"Types","title":"Type Hierarchy","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"The relationships between GeometricAlgebra types mirror the hierarchical relationships between the mathematical objects they represent.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"AbstractMultivector represents an arbitrary multivector. All concrete GeometricAlgebra types are subtypes of AbstractMultivector.\nAbstractBlade represents an arbitrary blade. Any mathematical objects that is logically a blade (i.e., a blade, a pseudoscalar, or a scalar) is represented by a concrete GeometricAlgebra type that is a subtype of AbstractBlade.\nAbstractScalar represents an arbitrary scalar value. Any mathematical objects that is logically a scalar (i.e., a scalar or a special scalar value) is represented by a concrete GeometricAlgebra type that is a subtype of AbstractScalar.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"AbstractMultivector\n├─ Multivector\n└─ AbstractBlade\n   ├─ Blade\n   ├─ Pseudoscalar\n   └─ AbstractScalar\n      ├─ Scalar\n      ├─ One\n      └─ Zero","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"","category":"page"},{"location":"types/#AbstractMultivector","page":"Types","title":"AbstractMultivector","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"AbstractMultivector","category":"page"},{"location":"types/#GeometricAlgebra.AbstractMultivector","page":"Types","title":"GeometricAlgebra.AbstractMultivector","text":"AbstractMultivector{<:AbstractFloat}\n\nSupertype for all multivector types.\n\n\n\n\n\n","category":"type"},{"location":"types/#Interface","page":"Types","title":"Interface","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"The AbstractMultivector interface is defined by the following functions.","category":"page"},{"location":"types/#Properties","page":"Types","title":"Properties","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"dim\ngrades\nblades\nnorm\ngetindex","category":"page"},{"location":"types/#GeometricAlgebra.dim","page":"Types","title":"GeometricAlgebra.dim","text":"dim(M::AbstractMultivector)::Int\n\nReturn the dimension of the real space that M is embedded within.\n\n\n\n\n\n","category":"function"},{"location":"types/#GeometricAlgebra.grades","page":"Types","title":"GeometricAlgebra.grades","text":"grades(M::AbstractMultivector; collect=true)::Vector{Int}\n\nReturn the grades of the nonzero k-vector components of M. When collect is false, an iterator over the grades is returned.\n\n\n\n\n\n","category":"function"},{"location":"types/#GeometricAlgebra.blades","page":"Types","title":"GeometricAlgebra.blades","text":"blades(M::AbstractMultivector)::Vector{<:AbstractBlade}\n\nReturn the blades that M is composed of.\n\n\n\n\n\n","category":"function"},{"location":"types/#LinearAlgebra.norm","page":"Types","title":"LinearAlgebra.norm","text":"norm(M::AbstractMultivector)::AbstractFloat\n\nCompute the norm of M.\n\n\n\n\n\n","category":"function"},{"location":"types/#Base.getindex","page":"Types","title":"Base.getindex","text":"getindex(M::AbstractMultivector, k::Int)::Vector{<:AbstractBlade}\n\nReturn the k-vector component of M.\n\n\n\n\n\n","category":"function"},{"location":"types/#Utility-Functions","page":"Types","title":"Utility Functions","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"zero\niszero\none\nisone\nconvert","category":"page"},{"location":"types/#Base.zero","page":"Types","title":"Base.zero","text":"zero(M::AbstractMultivector)::Zero\nzero(::Type{<:AbstractMultivector})::Zero\nzero(::Type{<:AbstractMultivector{T}})::Zero{T} where {T<:AbstractFloat}\n\nReturn the additive identity for the geometric algebra that M is an element of.\n\n\n\n\n\n","category":"function"},{"location":"types/#Base.iszero","page":"Types","title":"Base.iszero","text":"iszero(M::AbstractMultivector)\n\nReturn true if M == zero(M); return false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"types/#Base.one","page":"Types","title":"Base.one","text":"one(M::AbstractMultivector)::One\none(::Type{<:AbstractMultivector})::One\none(::Type{<:AbstractMultivector{T}})::One{T} where {T<:AbstractFloat}\n\nReturn the multiplicative identity for the geometric algebra that M is an element of.\n\n\n\n\n\n","category":"function"},{"location":"types/#Base.isone","page":"Types","title":"Base.isone","text":"isone(M::AbstractMultivector)\n\nReturn true if M == one(M); return false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"types/#Base.convert","page":"Types","title":"Base.convert","text":"convert(::Type{T}, M::AbstractMultivector)::AbstractMultivector{T}\n    where {T<:AbstractFloat}\n\nConvert M to have the floating-point precision of type T.\n\n\n\n\n\n","category":"function"},{"location":"types/","page":"Types","title":"Types","text":"","category":"page"},{"location":"types/#AbstractBlade-Interface","page":"Types","title":"AbstractBlade Interface","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"AbstractBlade","category":"page"},{"location":"types/#GeometricAlgebra.AbstractBlade","page":"Types","title":"GeometricAlgebra.AbstractBlade","text":"AbstractBlade{<:AbstractFloat}\n\nSupertype for all blade types.\n\n\n\n\n\n","category":"type"},{"location":"types/#Interface-2","page":"Types","title":"Interface","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"The AbstractBlade interface is defined by the following functions.","category":"page"},{"location":"types/#Properties-2","page":"Types","title":"Properties","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"grade\nbasis\nvolume\nsign","category":"page"},{"location":"types/#GeometricAlgebra.grade","page":"Types","title":"GeometricAlgebra.grade","text":"grade(B::AbstractBlade)::Int\n\nReturn the grade of B.\n\n\n\n\n\n","category":"function"},{"location":"types/#GeometricAlgebra.basis","page":"Types","title":"GeometricAlgebra.basis","text":"basis(B::AbstractBlade)::Matrix\n\nReturn an orthonormal basis for the subspace represented by B.\n\nWhen B is an AbstractScalar, 1 (at the precision of B) is returned. When B is a Pseudoscalar, LinearAlgebra.I is returned.\n\n\n\n\n\n","category":"function"},{"location":"types/#GeometricAlgebra.volume","page":"Types","title":"GeometricAlgebra.volume","text":"volume(B::AbstractBlade)::AbstractFloat\n\nReturn the signed volume of B.\n\nWhen B is a Blade, volume(B) is the signed norm of the blade relative to its unit basis.\n\nnote: Note\nThe volume of a blade encodes both norm and orientation information of a blade.\n\n\n\n\n\n","category":"function"},{"location":"types/#Base.sign","page":"Types","title":"Base.sign","text":"sign(B::AbstractBlade)::Int8\n\nReturn the sign of B relative to its unit basis.\n\n\n\n\n\n","category":"function"},{"location":"types/","page":"Types","title":"Types","text":"","category":"page"},{"location":"types/#AbstractScalar-Interface","page":"Types","title":"AbstractScalar Interface","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"AbstractScalar","category":"page"},{"location":"types/#GeometricAlgebra.AbstractScalar","page":"Types","title":"GeometricAlgebra.AbstractScalar","text":"AbstractScalar{<:AbstractFloat}\n\nSupertype for all scalar types.\n\n\n\n\n\n","category":"type"},{"location":"types/","page":"Types","title":"Types","text":"The AbstractScalar interface is defined by the following functions.","category":"page"},{"location":"types/#Properties-3","page":"Types","title":"Properties","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"value","category":"page"},{"location":"types/#GeometricAlgebra.value","page":"Types","title":"GeometricAlgebra.value","text":"value(B::AbstractScalar)::AbstractFloat\n\nReturn the value of B (with the same precision as B).\n\n\n\n\n\n","category":"function"},{"location":"types/","page":"Types","title":"Types","text":"","category":"page"},{"location":"types/#Concrete-Types","page":"Types","title":"Concrete Types","text":"","category":"section"},{"location":"types/#Multivector","page":"Types","title":"Multivector","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"warning: Warning\nSupport for the Multivector type is not fully implemented yet. Full support for the AbstractMultivector interface and all operations is expected in v0.2.0.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"Multivector\nMultivector(blades::Vector{<:AbstractBlade})\nMultivector(multivectors::Vector{<:AbstractMultivector})","category":"page"},{"location":"types/#GeometricAlgebra.Multivector","page":"Types","title":"GeometricAlgebra.Multivector","text":"struct Multivector{T<:AbstractFloat} <: AbstractMultivector\n\nMultivector represented with the floating-point precision of type T.\n\n\n\n\n\n","category":"type"},{"location":"types/#GeometricAlgebra.Multivector-Tuple{Vector{<:AbstractBlade}}","page":"Types","title":"GeometricAlgebra.Multivector","text":"Multivector{T}(blades::Vector{<:AbstractBlade}) where {T<:AbstractFloat}\n\nMultivector(blades::Vector{<:AbstractBlade})\n\nConstruct a multivector from a collection of blades. For each grade k, the blades used to represent the k-vector part of the multivector form an orthogonal basis for the subspace of k-vectors.\n\nnote: Note\nWhen the precision parameter T of the Multivector not explicitly specified, the precision of the Multivector is inferred from the precision of the first element of blades.\n\n\n\n\n\n","category":"method"},{"location":"types/#GeometricAlgebra.Multivector-Tuple{Vector{<:AbstractMultivector}}","page":"Types","title":"GeometricAlgebra.Multivector","text":"Multivector(multivectors::Vector{<:AbstractMultivector})\n\nConstruct a multivector from a collection of multivectors. For each grade k, the blades used to represent the k-vector part of the multivector form an orthogonal basis for the subspace of k-vectors.\n\nThe precision of the Multivector is inferred from the precision of the first element of multivectors.\n\n\n\n\n\n","category":"method"},{"location":"types/#Blade","page":"Types","title":"Blade","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Blade\nBlade(vectors::Matrix{<:Real})\nBlade(B::Blade)\nBlade(x::Real)","category":"page"},{"location":"types/#GeometricAlgebra.Blade","page":"Types","title":"GeometricAlgebra.Blade","text":"struct Blade{T<:AbstractFloat} <: AbstractBlade{T}\n\nBlade represented with the floating-point precision of type T. The norm and orientation of a Blade are encoded by its volume. The norm of a Blade is equal to abs(volume) and the orientation of a Blade relative to its basis is equal to sign(volume).\n\nnote: Note\nThe grade of a Blade type is always stricly greater than 0 and strictly less than the dimension of the space that the blade is embedded in.\n\n\n\n\n\n","category":"type"},{"location":"types/#GeometricAlgebra.Blade-Tuple{Matrix{<:Real}}","page":"Types","title":"GeometricAlgebra.Blade","text":"Blade{T}(vectors::Matrix{<:Real};\n         volume::Union{Real, Nothing}=nothing,\n         atol::Real=blade_atol(T)) where {T<:AbstractFloat}\n\nBlade{T}(v::Vector{<:Real};\n         volume::Union{Real, Nothing}=nothing,\n         atol::Real=blade_atol(T)) where {T<:AbstractFloat}\n\nBlade(vectors::Array{T};\n      volume::Union{Real, Nothing}=nothing,\n      atol::Real=blade_atol(T)) where {T<:AbstractFloat}\n\nBlade(vectors::Array{<:Integer};\n      volume::Union{Real, Nothing}=nothing,\n      atol::Real=blade_atol(Float64))\n\nConstruct a blade from a collection of vectors stored as (1) the columns of a matrix or (2) a single vector. If the norm of the blade is less than atol, a Scalar representing zero is returned. If the grade of the blade is equal to the dimension of the space that the blade is embedded in, a Pseudoscalar is returned.\n\nBy default, vectors determines the volume of the blade. However, if volume is specified, vectors is only used to define the subspace (including orientation) represented by the blade.\n\nnote: Orientation\nIf vectors contains more than one vector, the orientation of the blade is set as follows.When volume is positive, the orientation of the blade is the same as the orientation of the exterior product of the columns of vectors (taken in order).\nWhen volume is negative, the orientation of the blade is the opposite of the orientation implied by the vectors.If vectors contains a single vector v, the orientation of the blade is set as follows.When volume is positive, the orientation of the blade is the same as the direction of v.\nWhen volume is negative, the orientation of the blade is the opposite of the direction of v.\n\nnote: Precision\nWhen the precision is not specified, the following rules are applied to set the precision of the Blade.If vectors is an Array of floating-point values, the precision of the Blade is inferred from the precision of the elements of vector.\nIf vectors is an Array of integers, the precision of the Blade is set to Float64.\n\n\n\n\n\n","category":"method"},{"location":"types/#GeometricAlgebra.Blade-Tuple{Blade}","page":"Types","title":"GeometricAlgebra.Blade","text":"Blade{T}(B::Blade;\n      volume::Real=volume(B),\n      atol::Real=blade_atol(T),\n      copy_basis=false) where {T<: AbstractFloat}\n\nBlade(B::Blade;\n      volume::Real=volume(B),\n      atol::Real=blade_atol(typeof(volume(B))),\n      copy_basis=false)\n\nCopy constructors. Construct a Blade representing the same space as B having a specified oriented volume relative to B. A Scalar representing zero is returned if the absolute value of volume is less than atol.\n\nWhen copy_basis is true, the basis of the new Blade is a copy of the basis of the original Blade; otherwise, the basis of the new Blade is reference to the basis of the original Blade.\n\n\n\n\n\n","category":"method"},{"location":"types/#GeometricAlgebra.Blade-Tuple{Real}","page":"Types","title":"GeometricAlgebra.Blade","text":"Blade(x::Real)::Scalar\n\nBlade(x::Scalar)::Scalar\n\nConvenience constructors that return a Scalar with value x.\n\n\n\n\n\n","category":"method"},{"location":"types/#Pseudoscalar","page":"Types","title":"Pseudoscalar","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Pseudoscalar\nPseudoscalar(dim::Integer, value::AbstractFloat)\nPseudoscalar(B::Pseudoscalar; value::Real=value(B))","category":"page"},{"location":"types/#GeometricAlgebra.Pseudoscalar","page":"Types","title":"GeometricAlgebra.Pseudoscalar","text":"struct Pseudoscalar{T<:AbstractFloat} <: AbstractBlade\n\nPseudoscalar (an n-blade) represented with the floating-point precision of type T. The basis for a Pseudoscalar is the standard basis for an n-dimensional real vector space. The norm and orientation of a Pseudoscalar are encoded in its value. The norm of a Pseudoscalar is equal to abs(value) and the orientation of a Pseudoscalar relative to the standard basis is equal to sign(value).\n\n\n\n\n\n","category":"type"},{"location":"types/#GeometricAlgebra.Pseudoscalar-Tuple{Integer, AbstractFloat}","page":"Types","title":"GeometricAlgebra.Pseudoscalar","text":"Pseudoscalar{T}(dim::Integer, value::Real) where {T<:AbstractFloat}\n\nPseudoscalar(dim::Integer, value::Real)\n\nConstruct a pseudoscalar for a geometric algebra in dim dimensions having the specified value.\n\nWhen the precision is not specified, the following rules are applied to set the precision of the Pseudoscalar.\n\nnote: Note\nIf value is a floating-point value, the precision of the Pseudoscalar is inferred from the precision of value.\nIf value is an integer, the precision of the Pseudoscalar is set to Float64.\n\n\n\n\n\n","category":"method"},{"location":"types/#GeometricAlgebra.Pseudoscalar-Tuple{Pseudoscalar}","page":"Types","title":"GeometricAlgebra.Pseudoscalar","text":"Pseudoscalar(B::Pseudoscalar{T};\n             value::Real=value(B)) where {T<:AbstractFloat}\n\nCopy constructor. Construct a Pseudoscalar representing the same space as B having the specified value.\n\n\n\n\n\n","category":"method"},{"location":"types/#Scalar","page":"Types","title":"Scalar","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Scalar\nScalar(value::AbstractFloat)\n","category":"page"},{"location":"types/#GeometricAlgebra.Scalar","page":"Types","title":"GeometricAlgebra.Scalar","text":"struct Scalar{T<:AbstractFloat} <: AbstractScalar{T}\n\nScalar (a 0-blade) represented with the floating-point precision of type T. The basis and volume of a Scalar are 1 and the value of the Scalar, respectively.\n\n\n\n\n\n","category":"type"},{"location":"types/#GeometricAlgebra.Scalar-Tuple{AbstractFloat}","page":"Types","title":"GeometricAlgebra.Scalar","text":"Scalar{T}(value::Real) where {T<:AbstractFloat}\n\nScalar(value::AbstractFloat)\n\nScalar(value::Integer)\n\nConstruct a scalar having the specified value.\n\nWhen the precision is not specified, the following rules are applied to set the precision of the Scalar.\n\nnote: Note\nIf value is a floating-point value, the precision of the Scalar is inferred from the precision of value.\nIf value is an integer, the precision of the Scalar is set to to Float64.\n\n\n\n\n\n","category":"method"},{"location":"types/#One","page":"Types","title":"One","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"One\nOne()","category":"page"},{"location":"types/#GeometricAlgebra.One","page":"Types","title":"GeometricAlgebra.One","text":"struct One{T<:AbstractFloat} <: AbstractScalar{T}\n\nMultiplicative identity for a geometric algebra (extended from a real vector space of arbitrary dimension).\n\n\n\n\n\n","category":"type"},{"location":"types/#GeometricAlgebra.One-Tuple{}","page":"Types","title":"GeometricAlgebra.One","text":"One()\n\nAlias for a One{Float64}().\n\n\n\n\n\n","category":"method"},{"location":"types/#Zero","page":"Types","title":"Zero","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Zero\nZero()","category":"page"},{"location":"types/#GeometricAlgebra.Zero","page":"Types","title":"GeometricAlgebra.Zero","text":"struct Zero{T<:AbstractFloat} <: AbstractScalar{T}\n\nAdditive identity for a geometric algebra (extended from a real vector space of arbitrary dimension).\n\n\n\n\n\n","category":"type"},{"location":"types/#GeometricAlgebra.Zero-Tuple{}","page":"Types","title":"GeometricAlgebra.Zero","text":"Zero()\n\nAlias for a Zero{Float64}().\n\n\n\n\n\n","category":"method"},{"location":"types/","page":"Types","title":"Types","text":"","category":"page"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Fontijne, D. (2007) \"Efficient Implementation of Geometric Algebra\". [PhD, University of Amsterdam]\nMacdonald, A. (2011). Linear and Geometric Algebra. CreateSpace Independent Publishing Platform","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Create a blade.\njulia> vectors = Matrix([3 3; -4 -4; 0 1]);\n\njulia> B = Blade(vectors)\nBlade{Float64}(3, 2, [-0.6 0.0; 0.8 0.0; 0.0 -1.0], 5.0)\n\njulia> dim(B)\n3\n\njulia> grade(B)\n2\n\njulia> norm(B)\n5.0\nCompute the outer product between blades.\njulia> u = [3, -4, 0, 0];  # a vector is a 1-blade\n\njulia> v = [3, -4, 1, 0];  # a vector is a 1-blade\n\njulia> B = u ∧ v\nBlade{Float64}(3, 2, [-0.6 0.0; 0.8 0.0; 0.0 -1.0], 5.0)\n\njulia> grade(Blade(u))\n1\n\njulia> grade(Blade(v))\n1\n\njulia> grade(B)\n2\njulia> A = [0, 0, 0, 2];\n\njulia> C = A ∧ B\nBlade{Float64}(4, 3, [-0.6 0.0 0.0; 0.8 0.0 0.0; 0.0 1.0 0.0; 0.0 0.0 -1.0], -10.0)\n\njulia> grade(Blade(A))\n1\n\njulia> grade(B)\n2\n\njulia> grade(C)\n3\nCompute the additive and multiplicative inverses of a vector (1-blade).\njulia> v = Blade([3, 4, 0, 0])\nBlade{Float64}(4, 1, [0.6; 0.8; 0.0; 0.0;;], 5.0)\n\njulia> -v\nBlade{Float64}(4, 1, [0.6; 0.8; 0.0; 0.0;;], -5.0)\n\njulia> inv(v)\nBlade{Float64}(4, 1, [0.6; 0.8; 0.0; 0.0;;], 0.2)\n\njulia> 1 / v\nBlade{Float64}(4, 1, [0.6; 0.8; 0.0; 0.0;;], 0.2)\n\njulia> v^-1\nBlade{Float64}(4, 1, [0.6; 0.8; 0.0; 0.0;;], 0.2)\nCreate a pseudoscalar for mathbbG^n.\njulia> n = 10;\njulia> value = -2;\njulia> B = Pseudoscalar(n, value)\nPseudoscalar{Float64}(10, -2.0)\n\njulia> grade(B)\n10\n\njulia> norm(B)\n2.0\n\njulia> volume(B)\n-2.0\nCompute the dual of a blade.\njulia> vectors = Matrix([3 3; -4 -4; 0 1]);\n\njulia> B = Blade(vectors);\n\njulia> dual(B)\nBlade{Float64}(3, 1, [0.8; 0.6; 0.0;;], -5.0)\n\njulia> isapprox(dot(B.basis[:, 1], dual(B).basis), 0; atol=1e-15)\ntrue\n\njulia> isapprox(dot(B.basis[:, 2], dual(B).basis), 0; atol=1e-15)\ntrue\n\njulia> B ∧ dual(B)\nPseudoscalar{Float64}(3, 25.0)\nWe can confirm that is the dual of blade B is the same as division by the unit pseudoscalar for mathbbG^n.\njulia> dual(B) ≈ B / Pseudoscalar(3, 1)\ntrue\nCompute the geometric product of two vectors. Note that the geometric product of two vectors is a multivector (a linear combination of blades).\njulia> u = Blade([1, 0, 0]);\n\njulia> v = Blade([sqrt(3), 1, 0]);\n\njulia> M = u * v\nMultivector{Float64}(3, DataStructures.SortedDict{Int64, Vector{AbstractBlade}, Base.Order.ForwardOrdering}(0 => [Scalar{Float64}(1.7320508075688776)], 2 => [Blade{Float64}(3, 2, [1.0 0.0; 0.0 1.0; 0.0 0.0], 1.0)]), 2.8284271247461903)\n\njulia> M[0]\n1-element Vector{AbstractBlade}:\n Scalar{Float64}(1.7320508075688776)\n\njulia> M[1]\nAbstractBlade[]\n\njulia> M[3]\n1-element Vector{AbstractBlade}:\n Blade{Float64}(3, 2, [1.0 0.0; 0.0 1.0; 0.0 0.0], 1.0)\nRight multiplication of M by the multiplicative inverse of v yields u.\njulia> M * inv(v) ≈ u\ntrue\n\njulia> M * (1 / v) ≈ u\ntrue\nLeft multiplication of M by the multiplicative inverse of u yields v.\njulia> inv(u) * M ≈ v\ntrue\n\njulia> (1 / u) * M ≈ v\ntrue","category":"page"},{"location":"docs-index/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"docs-index/","page":"Index","title":"Index","text":"","category":"page"},{"location":"#GeometricAlgebra.jl","page":"Home","title":"GeometricAlgebra.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GeometricAlgebra.jl defines a collection of basic types and operations that support numerical geometric algebra computations. Our aim is to simplify the process of implementing numerical algorithms for geometric operations expressed algebraically in the language of geometric algebra.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The GeometricAlgebra package features:","category":"page"},{"location":"","page":"Home","title":"Home","text":"an easy-to-use interface for constructing geometric algebra objects,\nintuitive notation for operations on and between geometric algebra objects, and\nbehavior that is consistent with expectations for numerical linear algebra libraries.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Geometric algebra extends classical linear algebra (of inner product spaces over the real numbers mathbbR) by including the higher-dimensional siblings of the vector (a 1-dimensional object) and defining algebraic operations that augment the basic operations on inner product spaces, such as the exterior product and geometric product. With these extensions, geometric algebra makes it possible to use simple algebraic expressions to represent geometric objects (e.g., subspaces) and operations (e.g., projection, computing the orthogonal complement).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The key mathematical object introduced in geometric algebra is the blade. Geometrically, blades represent two concepts (1) k-dimensional subspaces of mathbbR^n and (2) k-dimensional hypervolumes (of arbitrary shape). The exterior product (wedge), which combines two blades and yields a blade, is an example of an algebraic operation with geometric meaning. For instance, it enables any blade B to be expressed algebraically in terms of a basis b_1 ldots b_k for the subspace represented by the blade:","category":"page"},{"location":"","page":"Home","title":"Home","text":"B = b_1 wedge cdots wedge b_k","category":"page"},{"location":"","page":"Home","title":"Home","text":"The GeometricAlgebra package implements types and functions that make it straightforward to do computational geometric algebra calculations.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Add the Velexi Julia package registry.\njulia>  # Press ']' to enter the Pkg REPL mode.\npkg> registry add https://github.com/velexi-research/JuliaRegistry.git\ntip: Only needed once\nThis step only needs to be performed once per Julia installation.\nnote: GeometricAlgebra is registered with a local Julia package registry\nThe Velexi registry needs to be added to your Julia installation because GeometricAlgebra is currently registered with Velexi Julia package registry (not the General Julia package registry).\nInstall the GeometricAlgebra package via the Pkg REPL. That's it!\njulia>  # Press ']' to enter the Pkg REPL mode.\npkg> add GeometricAlgebra","category":"page"},{"location":"#Summary-of-Types","page":"Home","title":"Summary of Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GeometricAlgebra defines concrete types for the following hierarchy of mathematical objects.","category":"page"},{"location":"","page":"Home","title":"Home","text":"multivector: Multivector\nblade: Blade\nscalar (0-blade) : Scalar\nmultiplicative identity: One\nadditive identity: Zero\npseudoscalar (n-blade): Pseudoscalar","category":"page"},{"location":"#Summary-of-Operations","page":"Home","title":"Summary of Operations","text":"","category":"section"},{"location":"#Unary-Operations","page":"Home","title":"Unary Operations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"additive inverse: -\nmultiplicative inverse: inv\nreverse: reverse\ndual: dual","category":"page"},{"location":"#Binary-Operations","page":"Home","title":"Binary Operations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"addition/subtraction: +, -\nmultiplication/division (geometric product): *, /\nexterior product: ∧ (wedge)\ninner product (left contraction): < (contract_left), dot","category":"page"},{"location":"#Geometric-Operations","page":"Home","title":"Geometric Operations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"projection: project","category":"page"},{"location":"#Supported-Numeric-Types","page":"Home","title":"Supported Numeric Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All GeometricAlgebra types are parametrized by the numeric type used to represent the real numbers. Only subtypes of AbstractFloat are supported (i.e., Float16, Float32, Float64, BigFloat). Other subtypes of Real (e.g., Rational, Irrational) are not allowed as parameters to GeometricAlgebra types.","category":"page"},{"location":"#Related-Packages","page":"Home","title":"Related Packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are several active geometric algebra packages in the Julia ecosystem. Most of the available packages are implemented using an additive blade representation and emphasize symbolic computations. To the best of our knowledge, GeometricAlgebra.jl is the only package currently uses a multiplicative blade representation and focuses on numerical computations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Grassmann.jl\nMultivectors.jl\nJollywatt/GeometricAlgebra.jl\nserenity4/GeometricAlgebra.jl\nGAlgebra.jl","category":"page"},{"location":"implementation/#Implementation-Details","page":"Implementation Details","title":"Implementation Details","text":"","category":"section"},{"location":"implementation/#Blade-Representation","page":"Implementation Details","title":"Blade Representation","text":"","category":"section"},{"location":"implementation/","page":"Implementation Details","title":"Implementation Details","text":"In GeometricAlgebra.jl, blades are represented using a multiplicative representation where each blade is stored as","category":"page"},{"location":"implementation/","page":"Implementation Details","title":"Implementation Details","text":"a matrix containing an orthonormal basis for the subspace represented by the blade and\na scalar value representing the magnitude and orientation of the blade.","category":"page"},{"location":"implementation/","page":"Implementation Details","title":"Implementation Details","text":"For numerical computing, this representation has the following advantages.","category":"page"},{"location":"implementation/","page":"Implementation Details","title":"Implementation Details","text":"A blade's dimension n and grade k are limited by only the availability of RAM to store n times k matrices.\nState-of-the-art numerical linear algebra algorithms can be leveraged to implement geometric algebra operations.","category":"page"},{"location":"implementation/","page":"Implementation Details","title":"Implementation Details","text":"For more details, see Fontijne's PhD Thesis in the References.","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"CurrentModule = GeometricAlgebra","category":"page"},{"location":"operations/#Unary-Operations","page":"Operations","title":"Unary Operations","text":"","category":"section"},{"location":"operations/","page":"Operations","title":"Operations","text":"-(M::AbstractMultivector)\ninv\nreverse\ndual\ndual(B::AbstractBlade, C::AbstractBlade)","category":"page"},{"location":"operations/#Base.:--Tuple{AbstractMultivector}","page":"Operations","title":"Base.:-","text":"-(M::AbstractMultivector)::AbstractMultivector\n\nCompute the additive inverse of M.\n\n\n\n\n\n","category":"method"},{"location":"operations/#Base.inv","page":"Operations","title":"Base.inv","text":"inv(B::AbstractBlade)::AbstractBlade\n\nCompute the multiplicative inverse of blade B.\n\n\n\n\n\n","category":"function"},{"location":"operations/#Base.reverse","page":"Operations","title":"Base.reverse","text":"reverse(M::AbstractMultivector)::AbstractMultivector\n\nCompute the reverse of M.\n\n\n\n\n\n","category":"function"},{"location":"operations/#GeometricAlgebra.dual","page":"Operations","title":"GeometricAlgebra.dual","text":"dual(M::AbstractMultivector)::AbstractMultivector\n\nCompute the dual of M (relative to the unit pseudoscalar of the geometric algebra that M is an element of).\n\n\n\n\n\n","category":"function"},{"location":"operations/#GeometricAlgebra.dual-Tuple{AbstractBlade, AbstractBlade}","page":"Operations","title":"GeometricAlgebra.dual","text":"dual(B::AbstractBlade, C::AbstractBlade)::AbstractBlade\n\nCompute the dual B relative to the subspace represented by C.\n\nnote: Note\ndual(B, C) is only defined ifB and C are extended from real vector spaces of the same dimension and\nthe subspace represented by B is contained in subspace represented by C.If either of these conditions is not satisfied, an error is thrown.\n\nnote: Note\nThe volume of C is ignored when computing dual(B, C).\n\n\n\n\n\n","category":"method"},{"location":"operations/#Binary-Operations","page":"Operations","title":"Binary Operations","text":"","category":"section"},{"location":"operations/","page":"Operations","title":"Operations","text":"+(M::AbstractMultivector, N::AbstractMultivector)\n-(M::AbstractMultivector, N::AbstractMultivector)\n*(M::AbstractMultivector, N::AbstractMultivector)\n/(M::AbstractMultivector, N::AbstractMultivector)\nwedge\n∧\ncontract_left\n<\ndot","category":"page"},{"location":"operations/#Base.:+-Tuple{AbstractMultivector, AbstractMultivector}","page":"Operations","title":"Base.:+","text":"+(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\nCompute the sum of M and N.\n\n\n\n\n\n","category":"method"},{"location":"operations/#Base.:--Tuple{AbstractMultivector, AbstractMultivector}","page":"Operations","title":"Base.:-","text":"-(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\nCompute the difference between M and N.\n\n\n\n\n\n","category":"method"},{"location":"operations/#Base.:*-Tuple{AbstractMultivector, AbstractMultivector}","page":"Operations","title":"Base.:*","text":"*(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\nCompute the geometric product of M and N.\n\n\n\n\n\n","category":"method"},{"location":"operations/#Base.:/-Tuple{AbstractMultivector, AbstractMultivector}","page":"Operations","title":"Base.:/","text":"/(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\nCompute the geometric product of M with the inverse of N.\n\n\n\n\n\n","category":"method"},{"location":"operations/#GeometricAlgebra.wedge","page":"Operations","title":"GeometricAlgebra.wedge","text":"wedge(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\nwedge(M::AbstractMultivector, N::Vector{<:Real})::AbstractMultivector\nwedge(M::Vector{<:Real}, N::AbstractMultivector)::AbstractMultivector\nwedge(M::Vector{<:Real}, N::Vector{<:Real})::AbstractMultivector\n\nwedge(M::AbstractMultivector, N::Real)::AbstractMultivector\nwedge(M::Real, N::AbstractMultivector)::AbstractMultivector\n\nCompute the exterior product of M and N.\n\n\n\n\n\n","category":"function"},{"location":"operations/#GeometricAlgebra.:∧","page":"Operations","title":"GeometricAlgebra.:∧","text":"∧(M, N)::AbstractMultivector\n\nAlias for the wedge() function. Compute the exterior product of M and N.\n\n\n\n\n\n","category":"function"},{"location":"operations/#GeometricAlgebra.contract_left","page":"Operations","title":"GeometricAlgebra.contract_left","text":"contract_left(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\nCompute the left contraction of M with N.\n\n\n\n\n\n","category":"function"},{"location":"operations/#Base.:<","page":"Operations","title":"Base.:<","text":"<(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\nAlias for the contract_left() function. Compute the left contraction of M with N.\n\n\n\n\n\n","category":"function"},{"location":"operations/#LinearAlgebra.dot","page":"Operations","title":"LinearAlgebra.dot","text":"dot(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\nCompute the inner product of M and N.\n\n\n\n\n\n","category":"function"},{"location":"operations/#Geometric-Operations","page":"Operations","title":"Geometric Operations","text":"","category":"section"},{"location":"operations/","page":"Operations","title":"Operations","text":"project","category":"page"},{"location":"operations/#GeometricAlgebra.project","page":"Operations","title":"GeometricAlgebra.project","text":"project(M::AbstractMultivector, B::AbstractBlade;\n        return_blade=true)::Union{AbstractBlade, AbstractFloat,\n                                  Vector, Matrix, LinearAlgebra.I}\n\nCompute the projection of M onto the subspace represented by B.\n\nWhen return_blade is true, the return value is an AbstractBlade. Otherwise, the return value is an AbstractFloat if the result is a scalar, a Vector if the result is a vector, a Matrix if the result is a blade with 1 < grade < dim, and a multiple of LinearAlgebra.I if the result is a pseudoscalar.\n\n\n\n\n\n","category":"function"}]
}
