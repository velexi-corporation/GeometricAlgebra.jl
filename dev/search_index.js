var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = GeometricAlgebra","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"GeometricAlgebra.Blade\nGeometricAlgebra.Pseudoscalar\nGeometricAlgebra.Scalar\nGeometricAlgebra.One\nGeometricAlgebra.Zero","category":"page"},{"location":"api/#GeometricAlgebra.Blade","page":"API","title":"GeometricAlgebra.Blade","text":"struct Blade{T<:AbstractFloat} <: AbstractBlade{T}\n\nBlade represented with the floating-point precision of type T. The norm and orientation of a Blade are encoded by its volume. The norm of a Blade is equal to abs(volume) and the orientation of a Blade relative to its basis is equal to sign(volume).\n\nNotes\n\nThe grade of a Blade type is greater than 0 and less than the dimension of the space that the blade is embedded in\n\n\n\n\n\n","category":"type"},{"location":"api/#GeometricAlgebra.Pseudoscalar","page":"API","title":"GeometricAlgebra.Pseudoscalar","text":"struct Pseudoscalar{T<:AbstractFloat} <: AbstractBlade\n\nPseudoscalar (an (n-1)-blade) represented with the floating-point precision of type T. The basis for a Pseudoscalar is the standard basis for R^n. The norm and orientation of a Pseudoscalar are encoded in its value. The norm of a Pseudoscalar is equal to abs(value) and the orientation of a Pseudoscalar relative to the standard basis for R^n is equal to sign(value).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeometricAlgebra.Scalar","page":"API","title":"GeometricAlgebra.Scalar","text":"struct Scalar{T<:AbstractFloat} <: AbstractScalar{T}\n\nScalar (0-blade) represented with the floating-point precision of type T. The basis and volume of a Scalar are 1 and the value of the Scalar, respectively.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeometricAlgebra.One","page":"API","title":"GeometricAlgebra.One","text":"struct One{T<:AbstractFloat} <: AbstractScalar{T}\n\nMultiplicative identity for a geometric algebra (extended from a real vector space of arbitrary dimension).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeometricAlgebra.Zero","page":"API","title":"GeometricAlgebra.Zero","text":"struct Zero{T<:AbstractFloat} <: AbstractScalar{T}\n\nAdditive identity for a geometric algebra (extended from a real vector space of arbitrary dimension).\n\n\n\n\n\n","category":"type"},{"location":"api/#Basic-Operations","page":"API","title":"Basic Operations","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TODO","category":"page"},{"location":"api/","page":"API","title":"API","text":"GeometricAlgebra.inverse\nGeometricAlgebra.reverse\nGeometricAlgebra.dual","category":"page"},{"location":"api/#Base.reverse","page":"API","title":"Base.reverse","text":"reverse(M::AbstractMultivector)::AbstractMultivector\n\nCompute the reverse of M.\n\n\n\n\n\n","category":"function"},{"location":"api/#GeometricAlgebra.dual","page":"API","title":"GeometricAlgebra.dual","text":"dual(M::AbstractMultivector)::AbstractMultivector\n\nCompute the dual of M (relative to the pseudoscalar of the geometric algebra that M is an element of).\n\n\n\n\n\n","category":"function"},{"location":"api/#Unary-Operations","page":"API","title":"Unary Operations","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TODO","category":"page"},{"location":"api/#Type-Hierarchy","page":"API","title":"Type Hierarchy","text":"","category":"section"},{"location":"api/#Abstract-Types","page":"API","title":"Abstract Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"GeometricAlgebra.AbstractMultivector\nGeometricAlgebra.AbstractBlade\nGeometricAlgebra.AbstractScalar","category":"page"},{"location":"api/#GeometricAlgebra.AbstractMultivector","page":"API","title":"GeometricAlgebra.AbstractMultivector","text":"AbstractMultivector{<:AbstractFloat}\n\nSupertype for all multivector types.\n\nInterface\n\nProperties\n\ndim(M::AbstractMultivector)::Int\n\ngrades(M::AbstractMultivector)::Vector{Int}\n\nblades(M::AbstractMultivector)::Vector{<:AbstractBlade}\n\nnorm(M::AbstractMultivector)::AbstractFloat\n\ngetindex(M::AbstractMultivector, k::Int)::Vector{<:AbstractBlade}\n\nUnary Operations\n\n-(M::AbstractMultivector)::AbstractMultivector\n\nreverse(M::AbstractMultivector)::AbstractMultivector\n\ndual(M::AbstractMultivector)::AbstractMultivector\n\nBinary Operations\n\n+(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\n-(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\n*(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\n/(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\nwedge(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n∧(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\ncontract_left(M::AbstractMultivector,\n              N::AbstractMultivector)::AbstractMultivector\n<(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\ncontract_right(M::AbstractMultivector,\n               N::AbstractMultivector)::AbstractMultivector\n>(M::AbstractMultivector, N::AbstractMultivector)::AbstractMultivector\n\ndot(M::AbstractMultivector, N::AbstractMultivector;\n    left=true)::AbstractMultivector\n⋅(M::AbstractMultivector, N::AbstractMultivector;\n  left=true)::AbstractMultivector\n\nproject(M::AbstractMultivector, B::AbstractBlade)::AbstractMultivector\n\nComparison Functions\n\n==(M::AbstractMultivector, N::AbstractMultivector)::Bool\nisequal(M::AbstractMultivector, N::AbstractMultivector)::Bool\n\n≈(M::AbstractMultivector, N::AbstractMultivector)::Bool\nisapprox(M::AbstractMultivector, N::AbstractMultivector)::Bool\n\nUtility Functions\n\nconvert(::Type{T}, M::AbstractMultivector) where {T<:AbstractFloat}\n\nImplementation\n\nThe return value of all methods should preserve the precision of its AbstractMultivector arguments (when possible).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeometricAlgebra.AbstractBlade","page":"API","title":"GeometricAlgebra.AbstractBlade","text":"AbstractBlade{<:AbstractFloat}\n\nSupertype for all blade types.\n\nInterface\n\nProperties\n\ngrade(B::AbstractBlade)::Int\n\nbasis(B::AbstractBlade)::Matrix\n\nvolume(B::AbstractBlade)::AbstractFloat\n\nsign(B::AbstractBlade)::Int8\n\nOperations\n\ndual(B::AbstractBlade, C::AbstractBlade)::AbstractBlade\n\ninv(B::AbstractBlade)::AbstractBlade\n\nImplementation\n\nFor the AbstractBlade type, the volume of a blade should encode both norm and orientation information.\nThe return value of all methods should preserve the precision of its AbstractBlade arguments (when possible).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeometricAlgebra.AbstractScalar","page":"API","title":"GeometricAlgebra.AbstractScalar","text":"AbstractScalar{<:AbstractFloat}\n\nSupertype for all scalar types.\n\nInterface\n\nNote: the return value of all methods should preserve the precision of its AbstractScalar arguments (when possible).\n\nProperties\n\nvalue(B::AbstractScalar{T})::T where {T<:AbstractFloat}\n\n\n\n\n\n","category":"type"},{"location":"docs-index/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"docs-index/","page":"Index","title":"Index","text":"","category":"page"},{"location":"#GeometricAlgebra.jl","page":"Home","title":"GeometricAlgebra.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GeometricAlgebra.jl is a …","category":"page"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Blade\nPseudoscalar\nScalar\nOne\nZero","category":"page"},{"location":"#Operations","page":"Home","title":"Operations","text":"","category":"section"},{"location":"#Unary-Operations","page":"Home","title":"Unary Operations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"inverse, -\nreverse\ndual","category":"page"},{"location":"#Binary-Operations","page":"Home","title":"Binary Operations","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TODO","category":"page"}]
}
